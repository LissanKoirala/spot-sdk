// Copyright (c) 2019 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

syntax = "proto3";

option java_outer_classname = "DirectoryProto";

import "google/protobuf/timestamp.proto";
import "bosdyn/api/header.proto";

package bosdyn.api;

// A record representing a discoverable service.  By definition, all services
// discoverable by this system are expected to be grpc "services" provided by
// some server.

message ServiceEntry {
    // The unique user-friendly name of this service.
    string name = 1;

    // The type of this service. Usually identifies the underlying implementation.
	// Does not have to be unique among all ServiceEntry objects.
    string type = 2;

    // Information used to route to the desired Service.
    string authority = 3;

    // Last update time in robot timebase for this service record.
    google.protobuf.Timestamp last_update = 4;

    // If |user_token_required| is true, any requests to this service must contain
    // a user token for the machine.  Requests without a user token will result in a
    // 401. Most services will want to require a user_token, but ones like auth_service
    // do not.
    bool user_token_required = 5;

    // If |application_token_required| is true, any requests to this service must
    // contain an application token signed by Boston Dynamics. Requests without
    // an application token or without a valid application token will result in
    // a 403.
    bool application_token_required = 6;

    // If |permission_required| is non-empty, any requests to this service must
    // have the same string in the "per" claim of the user token. If
    // |application_token_required| is also true, the |permission_required| string
    // must also be present in the "per" claim of the application token.
    string permission_required = 7;
}

message GetServiceEntryRequest {
    // Common request header.
    RequestHeader header = 1;

    // The unique user-friendly name of the service.
    string service_name = 2;
}

message GetServiceEntryResponse {
    // Common response Header.
    ResponseHeader header = 1;

    // Return status.
    enum Status {
        // UNKNOWN should never be used.
        //
        // An internal DirectoryService issue has happened if UNKNOWN is set.
        STATUS_UNKNOWN = 0;

        // GetService was successful.
        //
        // |service_entry| is filled out.
        STATUS_OK = 1;

        // GetService failed because the requested service name does not exist.
        STATUS_NONEXISTENT_SERVICE = 2;
    }
    Status status = 2;

    // The record for the discovered service.  Only set if |status| == OK.
    ServiceEntry service_entry = 3;
}

message ListServiceEntriesRequest {
    // Common request header.
    RequestHeader header = 1;
}

message ListServiceEntriesResponse {
    // Common response header.
    ResponseHeader header = 1;

    // The resources managed by the LeaseService.
    repeated ServiceEntry service_entries = 2;
}
