// Copyright (c) 2019 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

syntax = "proto3";

package bosdyn.api.spot;

option java_outer_classname = "RobotCommandProto";

import "bosdyn/api/geometry.proto";
import "bosdyn/api/trajectory.proto";
import "google/protobuf/wrappers.proto";

enum LocomotionHint {
    option allow_alias = true;
    HINT_UNKNOWN = 0;             // Invalid; do not use.
    HINT_AUTO = 1;                // No hint, robot chooses an appropriate gait (typically trot.)
    HINT_TROT = 2;                // Most robust gait which moves diagonal legs together.
    HINT_SPEED_SELECT_TROT = 3;   // Trot which comes to a stand when not commanded to move.
    HINT_CRAWL = 4;               // Slow and steady gait which moves only one foot at a time.
    HINT_AMBLE = 5;               // Four beat gait where one foot touches down at a time.
    HINT_SPEED_SELECT_AMBLE = 6;  // Amble which comes to a stand when not commanded to move.
    HINT_JOG = 7;                 // Demo gait which moves diagonal leg pairs together with an aerial phase.
    HINT_HOP = 8;                 // Demo gait which hops while holding some feet in the air.
    /// HINT_AUTO_TROT is deprecated due to the name being too similar to the Spot Autowalk feature.
    /// It has been replaced by HINT_SPEED_SELECT_TROT. Keeping this value in here for now for backwards
    /// compatibility, but this may be removed in future releases.
    HINT_AUTO_TROT = 3;           // Same as HINT_SPEED_SELECT_TROT.
    /// HINT_AUTO_AMBLE is deprecated due to the name being too similar to the Spot Autowalk feature.
    /// It has been replaced by HINT_SPEED_SELECT_AMBLE. Keeping this value in here for now for backwards
    /// compatibility, but this may be removed in future releases.
    HINT_AUTO_AMBLE = 6;          // Same as HINT_SPEED_SELECT_AMBLE.
}

enum SwingHeight {
    SWING_HEIGHT_UNKNOWN = 0;    // Invalid; do not use.
    SWING_HEIGHT_LOW = 1;        // Low-stepping. Robot will try to only swing legs a few cm away from ground.
    SWING_HEIGHT_MEDIUM = 2;     // Default for most cases, use other values with caution.
    SWING_HEIGHT_HIGH = 3;       // High-stepping. Possibly useful with degraded vision operation.
}

// Params common across spot movement and mobility.
message MobilityParams {
    // Max allowable velocity at any point in trajectory.
    SE2VelocityLimit vel_limit = 1;

    // Parameters for controlling Spot's body during motion.
    BodyControlParams body_control = 2;

    // Desired gait during locomotion
    LocomotionHint locomotion_hint = 3;

    // Stairs are only supported in trot gaits. Using this hint will override some user defaults in
    // order to optimize stair behavior.
    bool stair_hint = 4;

    // Allow the robot to move with degraded perception when there are perception faults.
    bool allow_degraded_perception = 5;

    // Control of obstacle avoidance.
    ObstacleParams obstacle_params = 6;

    // Swing height setting
    SwingHeight swing_height = 7;

    // Ground terrain parameters.
    TerrainParams terrain_params = 8;

    // Robot Body External Force parameters
    BodyExternalForceParams external_force_params = 9;
}

// Parameters for offsetting the body from the normal default.
message BodyControlParams {
    // Notes about frames mentioned here:
    //
    // footprint: The footprint frame is a gravity aligned frame with its origin located at the
    // geometric center of the feet. The yaw of the frame (wrt the world) is calcuated by the average
    // foot locations, and is aligned with the feet.

    // Desired base offset relative to the footprint frame, ewrt the footprint frame.
    SE3Trajectory base_offset_rt_footprint = 1;
}

// Parameters for obstacle avoidance types.
message ObstacleParams {
  // Use vision to make the feet avoid obstacles by swinging higher?
  bool disable_vision_foot_obstacle_avoidance = 1;
  // Use vision to make the feet avoid constraints like edges of stairs?
  bool disable_vision_foot_constraint_avoidance = 2;
  // Use vision to make the body avoid obstacles?
  bool disable_vision_body_obstacle_avoidance = 3;
  // Desired padding around the body to use when attempting to avoid obstacles.
  double obstacle_avoidance_padding = 4; // meters. Must be >= 0.

}


// Ground contact parameters
message TerrainParams {
    // Terrain coefficient of friction user hint. This value must be postive and will clamped if
    // necessary on the robot side. Best suggested values lie in the range between 0.4 and 0.8
    // (which is the robot's default.)
    google.protobuf.DoubleValue ground_mu_hint = 2;
    // When true, the robot will assume the ground below it is made of grated metal.
    bool enable_grated_floor = 3;
}

// External Force on robot body parameters. This is a beta feature and still can have some odd behaviors.
// By default, the external force estimator is disabled on the robot.
message BodyExternalForceParams {
    // Indicates what external force estimate/override the robot should use.
    // By default, the external force estimator is disabled on the robot.
    enum ExternalForceIndicator {
        EXTERNAL_FORCE_NONE = 0;         // No external forces considered.
        EXTERNAL_FORCE_USE_ESTIMATE = 1; // Use external forces estimated by the robot
        EXTERNAL_FORCE_USE_OVERRIDE = 2; // Use external forces specified in an override vector.
    }
    ExternalForceIndicator external_force_indicator = 1;

    // Frame that the external override force is defined in.
    // It is currently only accepted in KO or body frames. 
    Frame frame = 2;

    // Specifies a force that the body should expect to feel. This allows the robot to "lean into"
    // an external force. Be careful using this override, since incorrect information can cause
    // the robot to fall over.
    Vec3 external_force_override = 3;
}
