/// The software robot E-Stop system:
///  1. Uses challenge-style communication to enforce end user (aka “originators”) connection
///     for Authority to Operate (ATO).
///  2. Offers the ability to issue a direct denial of  ATO.
syntax = "proto3";

package bosdyn.api;

option java_outer_classname = "EstopServiceProto";

import "bosdyn/api/estop.proto";
import "bosdyn/api/header.proto";

/// The GRPC service interface for the robot EStop/Authority to Operate system.
service EstopService {
    /// Register an Estop "originator" or "endpoint".
    /// This may be a replacement for another active endpoint.
    rpc RegisterEstopEndpoint(RegisterEstopEndpointRequest)
        returns (RegisterEstopEndpointResponse) {}

    /// Deregister the requested estop endpoint.
    rpc DeregisterEstopEndpoint(DeregisterEstopEndpointRequest)
        returns (DeregisterEstopEndpointResponse) {}

    /// Answer challenge from previous response (unless this is the first call), and request
    ///  a stop level.
    rpc EstopCheckIn(EstopCheckInRequest) returns (EstopCheckInResponse) {}

    /// Request the current EstopConfig, describing the expected set of endpoints.
    rpc GetEstopConfig(GetEstopConfigRequest) returns (GetEstopConfigResponse) {}

    /// Set a new active EstopConfig.
    rpc SetEstopConfig(SetEstopConfigRequest) returns (SetEstopConfigResponse) {}

    /// Ask for the current status of the estop system.
    rpc GetEstopSystemStatus(GetEstopSystemStatusRequest)
        returns (GetEstopSystemStatusResponse) {}
}

/// Client request for setting/maintaining an estop system level.
/// After the first CheckIn, must include response to previous challenge.
message EstopCheckInRequest {
    /// Common request header.
    RequestHeader header = 1;

    /// The endpoint making the request.
    EstopEndpoint endpoint = 2;

    /// Challenge being responded to.
    /// Don't set if this is the first EstopCheckInRequest.
    uint64 challenge = 3;

    /// Response to above challenge.
    /// Don't set if this is the first EstopCheckInRequest.
    uint64 response = 4;

    /// Assert this stop level.
    EstopStopLevel stop_level = 5;
}

/// Server response to EstopCheckInRequest.
message EstopCheckInResponse {
    /// Common response header.
    ResponseHeader header = 1;

    /// Copy of initial request.
    EstopCheckInRequest request = 2;

    /// Next challenge to answer.
    uint64 challenge = 3;

    enum Status {
        /// Unknown error occurred.
        STATUS_UNKNOWN = 0;

        /// Valid challenge has been returned.
        STATUS_OK = 1;

        /// The endpoint specified in the request is not registered.
        STATUS_ENDPOINT_UNKNOWN = 2;


        /// The challenge and/or response was incorrect.
        STATUS_INCORRECT_CHALLENGE_RESPONSE = 5;
    }
    /// Status code for the response.
    Status status = 4;
}

/// Register an endpoint.
/// EstopEndpoints must be registered before they can send commands or request challenges.
message RegisterEstopEndpointRequest {
    /// Common request header
    RequestHeader header = 1;

    /// The endpoint to replace.
    /// Set the endpoint's unique ID if replacing an active endpoint.
    EstopEndpoint target_endpoint = 2;

    /// ID of the configuration we are registering against.
    string target_config_id = 3;

    /// The description of the new endpoint.
    /// Do not set the unique ID. It will be ignored.
    EstopEndpoint new_endpoint = 4;
}

/// Response to registration request.
message RegisterEstopEndpointResponse {
    /// Common response header
    ResponseHeader header = 1;

    /// Copy of the initial request.
    RegisterEstopEndpointRequest request = 2;

    /// The resulting endpoint on success.
    EstopEndpoint new_endpoint = 3;

    enum Status {
        /// An unknown / unexpected error occurred.
        STATUS_UNKNOWN = 0;

        /// Request succeeded.
        STATUS_SUCCESS = 1;

        /// Target endpoint did not match.
        STATUS_ENDPOINT_MISMATCH = 2;

        /// Registered to wrong configuration.
        STATUS_CONFIG_MISMATCH = 3;

        /// New endpoint was invalid.
        STATUS_INVALID_ENDPOINT = 4;
    }
    /// Status code for the response.
    Status status = 4;
}

/// Deregister the specified estop endpoint registration.
message DeregisterEstopEndpointRequest {
    /// Common request header
    RequestHeader header = 1;

    /// The endpoint to deregister.
    EstopEndpoint target_endpoint = 2;

    /// ID of the configuration we are registering against.
    string target_config_id = 3;
}

/// Response to estop endpoint  deregistration request.
message DeregisterEstopEndpointResponse {
    /// Common resonse header.
    ResponseHeader header = 1;

    /// Copy of the initial request.
    DeregisterEstopEndpointRequest request = 2;

    enum Status {
        /// An unknown / unexpected error occurred.
        STATUS_UNKNOWN = 0;

        /// Request succeeded.
        STATUS_SUCCESS = 1;

        /// Target endpoint did not match.
        STATUS_ENDPOINT_MISMATCH = 2;

        /// Registered to wrong configuration.
        STATUS_CONFIG_MISMATCH = 3;
    }
    /// Status code for the response.
    Status status = 4;
}

/// Get the active EstopConfig.
message GetEstopConfigRequest {
    /// Common request header.
    RequestHeader header = 1;

    /// unique_id of EstopConfig to get.
    string target_config_id = 4;
}

/// Response to EstopConfigRequest.
message GetEstopConfigResponse {
    /// Common response header.
    ResponseHeader header = 1;

    /// Copy of the request.
    GetEstopConfigRequest request = 2;

    /// The currently active configuration.
    EstopConfig active_config = 3;
}

/// Set a new active EstopConfig.
message SetEstopConfigRequest {
    /// Common request header.
    RequestHeader header = 1;

    /// New configuration to set.
    EstopConfig config = 3;

    /// unique_id of EstopConfig to replace, if replacing one.
    string target_config_id = 4;
}

/// Response to EstopConfigRequest.
message SetEstopConfigResponse {
    /// Common response header.
    ResponseHeader header = 1;

    /// Copy of the request.
    SetEstopConfigRequest request = 2;

    /// The currently active configuration.
    EstopConfig active_config = 3;

    enum Status {
        /// An unknown / unexpected error occurred.
        STATUS_UNKNOWN = 0;

        /// Request succeeded.
        STATUS_SUCCESS = 1;

        /// Tried to replace a EstopConfig, but provided bad ID.
        STATUS_INVALID_ID = 2;

    }
    Status status = 4;
}

/// Ask for the current status of the Estop system.
message GetEstopSystemStatusRequest {
    /// Common request header.
    RequestHeader header = 1;
}

/// Respond with the current Estop system status.
message GetEstopSystemStatusResponse {
    /// Common response header.
    ResponseHeader header = 1;

    /// Status of the Estop system.
    EstopSystemStatus status = 3;
}
